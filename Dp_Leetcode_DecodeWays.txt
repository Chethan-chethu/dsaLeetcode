You have intercepted a secret message encoded as a string of numbers. The message is decoded via the following mapping:

"1" -> 'A'

"2" -> 'B'

...

"25" -> 'Y'

"26" -> 'Z'

However, while decoding the message, you realize that there are many different ways you can decode the message because some codes are contained in other codes ("2" and "5" vs "25").

For example, "11106" can be decoded into:

    "AAJF" with the grouping (1, 1, 10, 6)
    "KJF" with the grouping (11, 10, 6)
    The grouping (1, 11, 06) is invalid because "06" is not a valid code (only "6" is valid).

Note: there may be strings that are impossible to decode.

Given a string s containing only digits, return the number of ways to decode it. If the entire string cannot be decoded in any valid way, return 0.

The test cases are generated so that the answer fits in a 32-bit integer.

 

Example 1:

Input: s = "12"

Output: 2

Explanation:

"12" could be decoded as "AB" (1 2) or "L" (12).

Example 2:

Input: s = "226"

Output: 3

Explanation:

"226" could be decoded as "BZ" (2 26), "VF" (22 6), or "BBF" (2 2 6).

Example 3:

Input: s = "06"

Output: 0

Explanation:

"06" cannot be mapped to "F" because of the leading zero ("6" is different from "06"). In this case, the string is not a valid encoding, so return 0.

 

Constraints:

    1 <= s.length <= 100
    s contains only digits and may contain leading zero(s).


class Solution {
    public int numDecodings(String s) {
        int n=s.length();
        Integer[] dp=new Integer[n];
        return n==0? 0: solve(0,dp,n,s);
    }

	// catch is that the code can be mapped to a string of length atmost two
    public static int solve(int curIndex,Integer[] dp,int n,String s){
	// If the given string , perfectly matche one of the possibility , it is a valid result
       if(curIndex==n)return 1;
	// if the first character starts from zero , then it is not a possible solution
       if(s.charAt(curIndex)=='0')return 0;
	// dp memo
       if(dp[curIndex]!=null)return dp[curIndex];
       int res=0;
	// the first character is split , then the rest of the string is solved as a subproblem
       res=solve(curIndex+1,dp,n,s);
	// if it is possible to split the string for two characters and if it starts with one or if it starts from two && char<26 , then solve the subproblem
       if(curIndex<n-1 && ( s.charAt(curIndex)=='1' || (s.charAt(curIndex)=='2' && s.charAt(curIndex+1)<'7'))){        
        res+=solve(curIndex+2,dp,n,s);
       }        
        return dp[curIndex]=res;
    }

}