You are given an m x n integer array grid. There is a robot initially located at the top-left corner (i.e., grid[0][0]). The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at any point in time.

An obstacle and space are marked as 1 or 0 respectively in grid. A path that the robot takes cannot include any square that is an obstacle.

Return the number of possible unique paths that the robot can take to reach the bottom-right corner.

The testcases are generated so that the answer will be less than or equal to 2 * 109.

 

Example 1:

Input: obstacleGrid = [[0,0,0],[0,1,0],[0,0,0]]
Output: 2
Explanation: There is one obstacle in the middle of the 3x3 grid above.
There are two ways to reach the bottom-right corner:
1. Right -> Right -> Down -> Down
2. Down -> Down -> Right -> Right

Example 2:

Input: obstacleGrid = [[0,1],[0,0]]
Output: 1

 

Constraints:

    m == obstacleGrid.length
    n == obstacleGrid[i].length
    1 <= m, n <= 100
    obstacleGrid[i][j] is 0 or 1.

class Solution {
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int n=obstacleGrid.length;
        int m=obstacleGrid[0].length;
        Integer[][] dp=new Integer[n][m];

        // the number of ways to reach to first column (it is one) depends on the cell above it
        // and we can only traverse till there is no obstacle in the first column
        int i=0;
        while(i<n && obstacleGrid[i][0]!=1){
            dp[i][0]=1;
            i++;
        }

        // the number of ways to reach to first row (it is one) depends on the cell behind it
        // and we can only traverse till there is no obstacle in the first row
        i=0;
        while(i<m && obstacleGrid[0][i]!=1){
            dp[0][i]=1;
            i++;
        }

        // run dp to reach the last bootom right most cell
        return getNoOfPaths(n-1,m-1,dp,obstacleGrid,n,m);
    }

    public int getNoOfPaths(int i,int j,Integer[][] dp,int[][] obstacleGrid,int n,int m){
        // if the current dp is out of bounds/ there is an obstacle
        // then the number of ways to reach from here is zero
        if(i<0 || j<0 || i>=n || j>=m || obstacleGrid[i][j]==1)
        return 0;
        // memo
        if(dp[i][j]!=null)
        return dp[i][j];
        // no of ways to reach the current column is either from above /from left
        return dp[i][j]=getNoOfPaths(i-1,j,dp,obstacleGrid,n,m)+getNoOfPaths(i,j-1,dp,obstacleGrid,n,m);
    }
}